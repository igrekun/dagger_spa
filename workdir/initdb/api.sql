-- Create our API schema
create schema api;

-- Create tables for coffee tracking
create table api.coffee_types (
  id int primary key generated by default as identity,
  name text not null unique,
  caffeine_mg_per_oz int not null
);

create table api.cup_sizes (
  id int primary key generated by default as identity,
  name text not null unique,
  size_oz int not null
);

create table api.coffee_log (
  id int primary key generated by default as identity,
  coffee_type_id int not null references api.coffee_types(id),
  cup_size_id int not null references api.cup_sizes(id),
  consumed_at timestamptz not null default now(),
  notes text
);

-- Insert some initial data
insert into api.coffee_types (name, caffeine_mg_per_oz) values 
  ('Espresso', 64),
  ('Drip Coffee', 18),
  ('Cold Brew', 24),
  ('Americano', 16),
  ('Latte', 10),
  ('Decaf', 2);

insert into api.cup_sizes (name, size_oz) values
  ('Small', 8),
  ('Medium', 12),
  ('Large', 16),
  ('Extra Large', 20);

-- Create domain for HTML content
create domain "text/html" as text;

-- Create helper functions
create or replace function api.sanitize_html(text) returns text as $$
  select replace(replace(replace(replace(replace($1, '&', '&amp;'), '"', '&quot;'),'>', '&gt;'),'<', '&lt;'), '''', '&apos;')
$$ language sql immutable;

-- Function to format time ago
create or replace function api.time_ago(timestamp with time zone) returns text as $$
  select case
    when age(now(), $1) < interval '1 minute' then 'just now'
    when age(now(), $1) < interval '1 hour' then extract(minute from age(now(), $1))::text || ' minutes ago'
    when age(now(), $1) < interval '1 day' then extract(hour from age(now(), $1))::text || ' hours ago'
    when age(now(), $1) < interval '7 days' then extract(day from age(now(), $1))::text || ' days ago'
    else to_char($1, 'Mon DD, YYYY')
  end;
$$ language sql stable;

-- Function to generate HTML for a single coffee entry
create or replace function api.html_coffee_entry(cl api.coffee_log) returns text as $$
  select format($html$
    <article class="coffee-entry" id="coffee-%1$s">
      <div class="coffee-entry-header">
        <h4>%2$s %3$s</h4>
        <div class="coffee-entry-time">%4$s</div>
      </div>
      <div class="coffee-stats">
        <span class="caffeine-badge">%5$s mg caffeine</span>
        <span class="size-badge">%6$s oz</span>
      </div>
      %7$s
      <div class="actions">
        <button class="outline" 
                hx-delete="/rpc/delete_coffee?_id=%1$s"
                hx-target="#coffee-list"
                hx-confirm="Are you sure you want to delete this entry?">
          Delete
        </button>
      </div>
    </article>
  $html$,
    cl.id,
    (select name from api.coffee_types where id = cl.coffee_type_id),
    (select name from api.cup_sizes where id = cl.cup_size_id),
    api.time_ago(cl.consumed_at),
    ((select caffeine_mg_per_oz from api.coffee_types where id = cl.coffee_type_id) * 
     (select size_oz from api.cup_sizes where id = cl.cup_size_id)),
    (select size_oz from api.cup_sizes where id = cl.cup_size_id),
    case when cl.notes is null then '' else '<div class="notes">' || api.sanitize_html(cl.notes) || '</div>' end
  );
$$ language sql stable;

-- Function to list all coffee entries
create or replace function api.html_coffee_list() returns text as $$
  select coalesce(
    string_agg(
      api.html_coffee_entry(cl), 
      '' order by cl.consumed_at desc
    ),
    '<div class="empty-state"><em>No coffee consumed yet. Time for a cup?</em></div>'
  )
  from api.coffee_log cl;
$$ language sql stable;

-- Function to get coffee type options
create or replace function api.html_coffee_type_options() returns text as $$
  select string_agg(
    format('<option value="%s">%s (%s mg/oz)</option>', 
      id, 
      api.sanitize_html(name),
      caffeine_mg_per_oz
    ),
    '' order by name
  )
  from api.coffee_types;
$$ language sql stable;

-- Function to get cup size options
create or replace function api.html_cup_size_options() returns text as $$
  select string_agg(
    format('<option value="%s">%s (%s oz)</option>', 
      id, 
      api.sanitize_html(name),
      size_oz
    ),
    '' order by size_oz
  )
  from api.cup_sizes;
$$ language sql stable;

-- Function to get today's caffeine stats
create or replace function api.html_today_stats() returns text as $$
  select format($html$
    <div class="stats-card">
      <div class="stat">
        <div class="stat-value">%s</div>
        <div class="stat-label">Cups Today</div>
      </div>
      <div class="stat">
        <div class="stat-value">%s mg</div>
        <div class="stat-label">Caffeine Today</div>
      </div>
      <div class="stat">
        <div class="stat-value">%s</div>
        <div class="stat-label">Week Total</div>
      </div>
    </div>
  $html$,
    (select count(*) 
     from api.coffee_log 
     where date_trunc('day', consumed_at) = date_trunc('day', now())),
    
    (select coalesce(sum(ct.caffeine_mg_per_oz * cs.size_oz), 0)
     from api.coffee_log cl
     join api.coffee_types ct on cl.coffee_type_id = ct.id
     join api.cup_sizes cs on cl.cup_size_id = cs.id
     where date_trunc('day', cl.consumed_at) = date_trunc('day', now())),
    
    (select count(*) 
     from api.coffee_log 
     where consumed_at > now() - interval '7 days')
  );
$$ language sql stable;

-- Function to add a new coffee entry
create or replace function api.add_coffee(
  _coffee_type_id int,
  _cup_size_id int,
  _notes text default null
) returns "text/html" as $$
  insert into api.coffee_log(coffee_type_id, cup_size_id, notes)
  values (_coffee_type_id, _cup_size_id, _notes);

  select api.html_coffee_list();
$$ language sql;

-- Function to delete a coffee entry
create or replace function api.delete_coffee(_id int) returns "text/html" as $$
  delete from api.coffee_log where id = _id;
  select api.html_coffee_list();
$$ language sql;

-- Function for dashboard stats component
create or replace function api.dashboard_stats() returns "text/html" as $$
  select api.html_today_stats();
$$ language sql;

-- Main index page
create or replace function api.index() returns "text/html" as $$
  select $html$
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Coffee Consumption Tracker</title>
  <link href="https://cdn.jsdelivr.net/npm/@picocss/pico@next/css/pico.min.css" rel="stylesheet">
  <script src="https://unpkg.com/htmx.org@1.9.2"></script>
  <style>
    .container { max-width: 800px; margin: 0 auto; }
    .stats-card { 
      display: flex; 
      justify-content: space-between; 
      margin-bottom: 2rem;
      text-align: center;
    }
    .stat { flex: 1; padding: 1rem; background: var(--card-background-color); border-radius: 8px; margin: 0 0.5rem; }
    .stat-value { font-size: 1.8rem; font-weight: bold; }
    .stat-label { font-size: 0.9rem; opacity: 0.8; }
    .coffee-entry { 
      margin-bottom: 1rem; 
      border-left: 3px solid var(--primary); 
      padding-left: 1rem; 
    }
    .coffee-entry-header { 
      display: flex; 
      justify-content: space-between; 
      align-items: center; 
    }
    .coffee-entry-time { font-size: 0.8rem; opacity: 0.7; }
    .coffee-stats { 
      display: flex; 
      margin: 0.5rem 0; 
      font-size: 0.9rem; 
    }
    .caffeine-badge, .size-badge { 
      background: var(--primary-focus); 
      color: var(--primary-inverse);
      padding: 0.2rem 0.5rem; 
      border-radius: 4px; 
      margin-right: 0.5rem; 
    }
    .notes { 
      background: var(--card-sectionning-background-color); 
      padding: 0.5rem; 
      border-radius: 4px; 
      margin: 0.5rem 0;
      font-style: italic;
    }
    h4 { margin-bottom: 0; }
    .actions { margin-top: 0.5rem; }
    .actions button { margin: 0; padding: 0.2rem 0.5rem; font-size: 0.8rem; }
    .empty-state { text-align: center; padding: 2rem; opacity: 0.7; }
    form { margin-bottom: 2rem; }
    .toggle-form-btn { margin-bottom: 1rem; }
    #add-form { background: var(--card-background-color); padding: 1rem; border-radius: 8px; }
    .form-row { 
      display: flex; 
      gap: 1rem; 
      margin-bottom: 1rem; 
    }
    .form-row > div { flex: 1; }
    
    @media (max-width: 576px) {
      .stats-card { flex-direction: column; }
      .stat { margin: 0.5rem 0; }
      .form-row { flex-direction: column; gap: 0; }
    }
  </style>
</head>
<body hx-headers='{"Accept": "text/html"}'>
  <main class="container">
    <h1>Coffee Consumption Tracker</h1>
    
    <div id="dashboard-stats" hx-get="/rpc/dashboard_stats" hx-trigger="load, every 5m">
      $html$ || api.html_today_stats() || $html$
    </div>
    
    <button class="toggle-form-btn" hx-get="/rpc/add_form" hx-target="#form-container" hx-swap="innerHTML">
      Add New Coffee
    </button>
    
    <div id="form-container"></div>
    
    <h3>Recent Coffee Entries</h3>
    <div id="coffee-list">
      $html$ || api.html_coffee_list() || $html$
    </div>
  </main>
</body>
</html>
  $html$;
$$ language sql;

-- Function to render the add form
create or replace function api.add_form() returns "text/html" as $$
  select $html$
    <form id="add-form" hx-post="/rpc/add_coffee" hx-target="#coffee-list" hx-swap="innerHTML" hx-on="htmx:afterRequest: document.getElementById('form-container').innerHTML = ''">
      <h4>Add New Coffee Entry</h4>
      <div class="form-row">
        <div>
          <label for="coffee_type_id">Coffee Type</label>
          <select name="_coffee_type_id" id="coffee_type_id" required>
            <option value="">Select a type...</option>
            $html$ || api.html_coffee_type_options() || $html$
          </select>
        </div>
        <div>
          <label for="cup_size_id">Cup Size</label>
          <select name="_cup_size_id" id="cup_size_id" required>
            <option value="">Select a size...</option>
            $html$ || api.html_cup_size_options() || $html$
          </select>
        </div>
      </div>
      <div>
        <label for="notes">Notes (optional)</label>
        <textarea name="_notes" id="notes" rows="2"></textarea>
      </div>
      <div class="form-row">
        <button type="submit">Add Coffee</button>
        <button type="button" class="outline" hx-get="/rpc/close_form" hx-target="#form-container" hx-swap="innerHTML">Cancel</button>
      </div>
    </form>
  $html$;
$$ language sql;

-- Function to close the form
create or replace function api.close_form() returns "text/html" as $$
  select '';
$$ language sql;

-- Set up permissions for anonymous web user
create role web_anon nologin;
grant usage on schema api to web_anon;
grant select on api.coffee_types to web_anon;
grant select on api.cup_sizes to web_anon;
grant select, insert, delete on api.coffee_log to web_anon;
grant usage, select on sequence api.coffee_log_id_seq to web_anon;
grant execute on function api.sanitize_html(text) to web_anon;
grant execute on function api.time_ago(timestamp with time zone) to web_anon;
grant execute on function api.html_coffee_entry(api.coffee_log) to web_anon;
grant execute on function api.html_coffee_list() to web_anon;
grant execute on function api.html_coffee_type_options() to web_anon;
grant execute on function api.html_cup_size_options() to web_anon;
grant execute on function api.html_today_stats() to web_anon;
grant execute on function api.add_coffee(int, int, text) to web_anon;
grant execute on function api.delete_coffee(int) to web_anon;
grant execute on function api.dashboard_stats() to web_anon;
grant execute on function api.index() to web_anon;
grant execute on function api.add_form() to web_anon;
grant execute on function api.close_form() to web_anon;
